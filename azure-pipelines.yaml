trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - screenshots/

name: DevOps Pipeline
variables:
  InfraProvisioningResoureGroupName: group20210504
  tfBackendStorageAccountName: tfbackend20210504
  tfBackendStorageContainerName: tf-backend-files-20210504
  tfBackendFileName: tf-state-file-20210504
  tfvarsFile: dev.tfvars
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: ProvisionInfrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    #KEY VAULT TASK
    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'dev-sp'
        KeyVaultName: "secrets-kv-20210504"
        SecretsFilter: 'sp-id,sp-secret,tenant-id,subscription-id,tf-backend-sa-access-key'
      displayName: 'Get key vault secrets as pipeline variables'
    # AZURE CLI TASK
    - task: AzureCLI@1
      inputs:
        azureSubscription: 'dev-sp'
        scriptLocation: 'inlineScript'
        inlineScript: 'terraform version'
      displayName: "Terraform Version"
    # AZ LOGIN USING TERRAFORM SERVICE PRINCIPAL
    - script: |
        az login \
        --service-principal \
        -u $(sp-id) \
        -p $(sp-secret) \
        --tenant $(tenant-id)
        cd $(System.DefaultWorkingDirectory)/terraform
        echo '#######Terraform Init########'
        terraform init \
        -backend-config="storage_account_name=$(tfBackendStorageAccountName)" \
        -backend-config="container_name=$(tfBackendStorageContainerName)" \
        -backend-config="access_key=$(tf-backend-sa-access-key)" \
        -backend-config="key=$(tfBackendFileName)"
        echo '#######Terraform Plan########'
        terraform plan -var-file=$(tfvarsFile) \
        -var="client_id=$(sp-id)" \
        -var="client_secret=$(sp-secret)" \
        -var="tenant_id=$(tenant-id)" \
        -var="subscription_id=$(subscription-id)" \
        -out="out.plan"
        echo '#######Terraform Apply########'
        terraform apply out.plan
      displayName: 'Terraform Init, Plan and Apply'
  - job: UploadPackage
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive Package'
      inputs:
        rootFolderOrFile: 'package'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-package.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-package.zip
      displayName: 'Upload Package'
      artifact: drop-package
- stage: Deploy
  jobs:
  - deployment: DeployPackage
    displayName: Deploy Package
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'APP'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'dev-sp'
              appName: 'webapp20210504-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-package/$(Build.BuildId)-package.zip
  - deployment: DeployVM
    displayName: Deploy VM
    environment:
      name: 'VM'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                export PATH=$PATH:some/path


